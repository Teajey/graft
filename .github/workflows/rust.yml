name: Rust

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-graft:
    runs-on: ubuntu-latest

    steps:
      - name: Where am I?
        run: echo $GITHUB_WORKSPACE
      - name: Where am I?
        run: pwd
      # - name: Cache
      #   uses: actions/cache@v3.2.6
      #   with:
      #     # A list of files, directories, and wildcard patterns to cache and restore
      #     path: |
      #       ~/.cargo
      #       target
      #     # An explicit key for restoring and saving the cache
      #     key: build-graft-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('packages/graft/src/**/*') }}
      #     restore-keys: |
      #       build-graft-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-
      #       build-graft-${{ runner.os }}-
      #     # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
      # #         restore-keys: # optional
      # # The chunk size used to split up large files during upload, in bytes
      # #         upload-chunk-size: # optional
      # # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
      # #         enableCrossOsArchive: # optional, default is false
      # # Fail the workflow if cache entry is not found
      # #         fail-on-cache-miss: true
      # - uses: actions/checkout@v3
      # - name: Install Clippy
      #   run: rustup component add clippy
      # - name: Lint with Clippy
      #   run: cargo clippy --all-targets
      # - name: Build binary version
      #   run: cargo build
      # - name: Test binary version
      #   run: cargo test
      # - name: List current dir
      #   run: ls -lha
